/*
 *	This file is part of Transdroid <http://www.transdroid.org>
 *
 *	Transdroid is free software: you can redistribute it and/or modify
 *	it under the terms of the GNU General Public License as published by
 *	the Free Software Foundation, either version 3 of the License, or
 *	(at your option) any later version.
 *
 *	Transdroid is distributed in the hope that it will be useful,
 *	but WITHOUT ANY WARRANTY; without even the implied warranty of
 *	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *	GNU General Public License for more details.
 *
 *	You should have received a copy of the GNU General Public License
 *	along with Transdroid.  If not, see <http://www.gnu.org/licenses/>.
 *
 */
package org.transdroid.daemon;

import org.transdroid.core.app.settings.ServerSetting;

/**
 * A class that contains all the settings for a server daemon to connect.
 *
 * @author erickok
 */
public final class DaemonSettings {

    final private String name;
    final private Daemon type;
    final private String address;
    final private int port;
    final private boolean ssl;
    final private boolean sslTrustAll;
    final private String sslTrustKey;
    final private String folder;
    final private boolean useAuthentication;
    final private String username;
    final private String password;
    final private String extraPass;
    final private String authToken;
    final private OS os;
    final private String downloadDir;
    final private String ftpUrl;
    final private String ftpPassword;
    final private int timeout;
    final private boolean alarmOnFinishedDownload;
    final private boolean alarmOnNewTorrent;
    final private String idString;
    final private boolean isAutoGenerated;

    protected DaemonSettings() {
        this(null, null, null, 0, false, false, null, null, false, null, null, null, null,
                null, null, null, null, 0, false, false, null, false);
    }

    /**
     * Creates a daemon settings instance, providing full connection details
     *
     * @param name              A name used to identify this server to the user
     * @param type              The server daemon type
     * @param address           The server domain name or IP address
     * @param port              The port on which the server daemon is running
     * @param sslTrustKey       The specific key that will be accepted.
     * @param folder            The server (SCGI) folder
     * @param useAuthentication Whether to use basic authentication
     * @param username          The user name to provide during authentication
     * @param password          The password to provide during authentication
     * @param extraPass         The Deluge web interface password
     * @param downloadDir       The default download directory (which may also be used as base directory for file paths)
     * @param ftpUrl            The partial URL to connect to when requesting FTP-style transfers
     * @param timeout           The number of seconds to wait before timing out a connection attempt
     * @param idString          The (numeric) identifier for this server settings (used as postfix on stored preferenced)
     * @param isAutoGenerated   Whether this setting was generated rather than manually inputed by the user
     */
    public DaemonSettings(String name, Daemon type, String address, int port, boolean ssl,
                          boolean sslTrustAll, String sslTrustKey, String folder, boolean useAuthentication,
                          String username, String password, String extraPass, String authToken, OS os, String downloadDir, String ftpUrl, String ftpPassword, int timeout,
                          boolean alarmOnFinishedDownload, boolean alarmOnNewTorrent, String idString, boolean isAutoGenerated) {
        this.name = name;
        this.type = type;
        this.address = address;
        this.port = port;
        this.ssl = ssl;
        this.sslTrustAll = sslTrustAll;
        this.sslTrustKey = sslTrustKey;
        this.folder = folder;
        this.useAuthentication = useAuthentication;
        this.username = username;
        this.password = password;
        this.extraPass = extraPass;
        this.authToken = authToken;
        this.os = os;
        this.downloadDir = downloadDir;
        this.ftpUrl = ftpUrl;
        this.ftpPassword = ftpPassword;
        this.timeout = timeout;
        this.alarmOnFinishedDownload = alarmOnFinishedDownload;
        this.alarmOnNewTorrent = alarmOnNewTorrent;
        this.idString = idString;
        this.isAutoGenerated = isAutoGenerated;
    }

    public String getName() {
        return ServerSetting.getServerName(name, address);
    }

    public Daemon getType() {
        return type;
    }

    public String getAddress() {
        return address;
    }

    public int getPort() {
        return port;
    }

    public boolean getSsl() {
        return ssl;
    }

    public boolean getSslTrustAll() {
        return sslTrustAll;
    }

    public String getSslTrustKey() {
        return sslTrustKey;
    }

    public String getFolder() {
        return folder == null ? null : (folder.startsWith("/") ? folder : folder + "/");
    }

    public boolean shouldUseAuthentication() {
        return useAuthentication;
    }

    public String getUsername() {
        return username;
    }

    public String getPassword() {
        return password;
    }

    public String getExtraPassword() {
        return extraPass;
    }

    public String getAuthToken() {
        return authToken;
    }

    public OS getOS() {
        return os;
    }

    public String getDownloadDir() {
        return downloadDir;
    }

    public String getFtpUrl() {
        return ftpUrl;
    }

    public String getFtpPassword() {
        return ftpPassword;
    }

    public int getTimeoutInMilliseconds() {
        return timeout * 1000;
    }

    public boolean shouldAlarmOnFinishedDownload() {
        return alarmOnFinishedDownload;
    }

    public boolean shouldAlarmOnNewTorrent() {
        return alarmOnNewTorrent;
    }

    public String getIdString() {
        return idString;
    }

    public boolean isAutoGenerated() {
        return isAutoGenerated;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;

        DaemonSettings that = (DaemonSettings) o;

        if (port != that.port) return false;
        if (ssl != that.ssl) return false;
        if (sslTrustAll != that.sslTrustAll) return false;
        if (useAuthentication != that.useAuthentication) return false;
        if (timeout != that.timeout) return false;
        if (alarmOnFinishedDownload != that.alarmOnFinishedDownload) return false;
        if (alarmOnNewTorrent != that.alarmOnNewTorrent) return false;
        if (isAutoGenerated != that.isAutoGenerated) return false;
        if (name != null ? !name.equals(that.name) : that.name != null) return false;
        if (type != that.type) return false;
        if (address != null ? !address.equals(that.address) : that.address != null) return false;
        if (sslTrustKey != null ? !sslTrustKey.equals(that.sslTrustKey) : that.sslTrustKey != null) return false;
        if (folder != null ? !folder.equals(that.folder) : that.folder != null) return false;
        if (username != null ? !username.equals(that.username) : that.username != null) return false;
        if (password != null ? !password.equals(that.password) : that.password != null) return false;
        if (extraPass != null ? !extraPass.equals(that.extraPass) : that.extraPass != null) return false;
        if (authToken != null ? !authToken.equals(that.authToken) : that.authToken != null) return false;
        if (os != that.os) return false;
        if (downloadDir != null ? !downloadDir.equals(that.downloadDir) : that.downloadDir != null) return false;
        if (ftpUrl != null ? !ftpUrl.equals(that.ftpUrl) : that.ftpUrl != null) return false;
        if (ftpPassword != null ? !ftpPassword.equals(that.ftpPassword) : that.ftpPassword != null) return false;
        return idString != null ? idString.equals(that.idString) : that.idString == null;
    }

    @Override
    public int hashCode() {
        int result = name != null ? name.hashCode() : 0;
        result = 31 * result + (type != null ? type.hashCode() : 0);
        result = 31 * result + (address != null ? address.hashCode() : 0);
        result = 31 * result + port;
        result = 31 * result + (ssl ? 1 : 0);
        result = 31 * result + (sslTrustAll ? 1 : 0);
        result = 31 * result + (sslTrustKey != null ? sslTrustKey.hashCode() : 0);
        result = 31 * result + (folder != null ? folder.hashCode() : 0);
        result = 31 * result + (useAuthentication ? 1 : 0);
        result = 31 * result + (username != null ? username.hashCode() : 0);
        result = 31 * result + (password != null ? password.hashCode() : 0);
        result = 31 * result + (extraPass != null ? extraPass.hashCode() : 0);
        result = 31 * result + (authToken != null ? authToken.hashCode() : 0);
        result = 31 * result + (os != null ? os.hashCode() : 0);
        result = 31 * result + (downloadDir != null ? downloadDir.hashCode() : 0);
        result = 31 * result + (ftpUrl != null ? ftpUrl.hashCode() : 0);
        result = 31 * result + (ftpPassword != null ? ftpPassword.hashCode() : 0);
        result = 31 * result + timeout;
        result = 31 * result + (alarmOnFinishedDownload ? 1 : 0);
        result = 31 * result + (alarmOnNewTorrent ? 1 : 0);
        result = 31 * result + (idString != null ? idString.hashCode() : 0);
        result = 31 * result + (isAutoGenerated ? 1 : 0);
        return result;
    }

    /**
     * Builds a text that can be used by a human reader to identify this daemon settings
     *
     * @return A concatenation of username, address, port and folder, where applicable
     */
    public String getHumanReadableIdentifier() {
        if (isAutoGenerated) {
            // Hide the 'implementation details'; just give the username and server
            return (this.shouldUseAuthentication() && this.getUsername() != null && !this.getUsername().equals("") ? this
                    .getUsername() + "@" : "") + getAddress();
        }
        return (this.ssl ? "https://" : "http://")
                + (this.shouldUseAuthentication() && this.getUsername() != null && !this.getUsername().equals("") ? this
                .getUsername() + "@" : "") + getAddress() + ":" + getPort()
                + (Daemon.supportsCustomFolder(getType()) && getFolder() != null ? getFolder() : "");
    }

    @Override
    public String toString() {
        return getHumanReadableIdentifier();
    }

}
